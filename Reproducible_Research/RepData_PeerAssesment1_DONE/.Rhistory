# There's an example for how to do so in its documentation
if (legend){
ylevs <- seq(-outer.radius, outer.radius, length = nlevels + 1)
rect(1.2 * outer.radius, ylevs[1:(length(ylevs) - 1)], 1.3 * outer.radius, ylevs[2:length(ylevs)], col = col, border = NA, xpd = TRUE)
rect(1.2 * outer.radius, min(ylevs), 1.3 * outer.radius, max(ylevs), border = "#66666650", xpd = TRUE)
text(1.3 * outer.radius, ylevs,round(breaks, 1), pos = 4, xpd = TRUE)
}
}
set.seed(10)
x <- rnorm(20)
y <- rnorm(20)
z <- rnorm(20)
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1))
dev.off()
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1))
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1),axes=False)
set.seed(10)
x <- rnorm(20)
y <- rnorm(20)
z <- rnorm(20)
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1),axes=False)
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1),axes=F)
set.seed(11)
x <- rnorm(20)
y <- rnorm(20)
z <- rnorm(20)
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1),axes=F)
set.seed(12)
x <- rnorm(20)
y <- rnorm(20)
z <- rnorm(20)
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1),axes=F)
set.seed(9)
x <- rnorm(20)
y <- rnorm(20)
z <- rnorm(20)
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1))
library(sspline)
install.packages("sspline")
library(sspline)
subdat <- WTdiff[sample(nrow(WTdiff), 200), 2:4]
attach(subdat)
splobj <- smooth.sspline(lon, lat, avgd)
plot(splobj, lon=seq(-180, 180, len=50), lat=seq(-90, 90, len=25),
main="World Average Temperature Change")
detach(subdat)
test <- smooth.sspline(x,y,z)
size(test)
names(test)
plot(test)
outer.radius = 1
minitics <- seq(-outer.radius, outer.radius, length.out = 1000)
Interp <- akima:::interp(x = x, y = y, z = z,
extrap = TRUE,
xo = minitics,
yo = minitics,
linear = FALSE)
Mat <- Interp[[3]]
# mark cells outside circle as NA
markNA <- matrix(minitics, ncol = 1000, nrow = 1000)
Mat[!sqrt(markNA ^ 2 + t(markNA) ^ 2) < outer.radius] <- NA
image(x = minitics, y = minitics, t(Mat), useRaster = TRUE, asp = 1, axes = FALSE, xlab = "", ylab = "", col = col, breaks = breaks)
if (!missing(breaks) & !missing(col)){
if (length(breaks) - length(col) != 1){
stop("breaks must be 1 element longer than cols")
}
}
if (missing(breaks) & !missing(col)){
breaks <- seq(min(Mat,na.rm = TRUE), max(Mat, na.rm = TRUE), length = length(col) + 1)
nlevels <- length(breaks) - 1
}
if (missing(col) & !missing(breaks)){
col <- rev(heat.colors(length(breaks) - 1))
nlevels <- length(breaks) - 1
}
if (missing(breaks) & missing(col)){
breaks <- seq(min(Mat,na.rm = TRUE), max(Mat, na.rm = TRUE), length = nlevels + 1)
col <- rev(heat.colors(nlevels))
}
# if legend desired, it goes on the right and some space is needed
if (legend) {
par(mai = c(1,1,1.5,1.5))
}
# begin plot
image(x = minitics, y = minitics, t(Mat), useRaster = TRUE, asp = 1, axes = FALSE, xlab = "", ylab = "", col = col, breaks = breaks)
# add contours if desired
breaks = seq(-2,8,by = 1)
if (!missing(breaks) & !missing(col)){
if (length(breaks) - length(col) != 1){
stop("breaks must be 1 element longer than cols")
}
}
if (missing(breaks) & !missing(col)){
breaks <- seq(min(Mat,na.rm = TRUE), max(Mat, na.rm = TRUE), length = length(col) + 1)
nlevels <- length(breaks) - 1
}
if (missing(col) & !missing(breaks)){
col <- rev(heat.colors(length(breaks) - 1))
nlevels <- length(breaks) - 1
}
if (missing(breaks) & missing(col)){
breaks <- seq(min(Mat,na.rm = TRUE), max(Mat, na.rm = TRUE), length = nlevels + 1)
col <- rev(heat.colors(nlevels))
}
# if legend desired, it goes on the right and some space is needed
if (legend) {
par(mai = c(1,1,1.5,1.5))
}
# begin plot
image(x = minitics, y = minitics, t(Mat), useRaster = TRUE, asp = 1, axes = FALSE, xlab = "", ylab = "", col = col, breaks = breaks)
# add contours if desired
image(x = minitics, y = minitics, t(Mat), useRaster = TRUE, asp = 1, axes = FALSE, xlab = "", ylab = "", col = col, breaks = breaks)
breaks = seq(-2,8,by = 1)
#Code from Tim Riffe
#https://gist.github.com/timriffe/2893780
#Current really slow
#can get rid of some of the axis stuff in there...
#add points
#try to speed up!
PolarImageInterpolate <- function(x, y, z, outer.radius = 1,
breaks, col, nlevels = 20, contours = TRUE, legend = TRUE,
axes = TRUE, circle.rads = pretty(c(0,outer.radius))){
minitics <- seq(-outer.radius, outer.radius, length.out = 1000)
# interpolate the data
Interp <- akima:::interp(x = x, y = y, z = z,
extrap = TRUE,
xo = minitics,
yo = minitics,
linear = FALSE)
Mat <- Interp[[3]]
# mark cells outside circle as NA
markNA <- matrix(minitics, ncol = 1000, nrow = 1000)
Mat[!sqrt(markNA ^ 2 + t(markNA) ^ 2) < outer.radius] <- NA
# sort out colors and breaks:
if (!missing(breaks) & !missing(col)){
if (length(breaks) - length(col) != 1){
stop("breaks must be 1 element longer than cols")
}
}
if (missing(breaks) & !missing(col)){
breaks <- seq(min(Mat,na.rm = TRUE), max(Mat, na.rm = TRUE), length = length(col) + 1)
nlevels <- length(breaks) - 1
}
if (missing(col) & !missing(breaks)){
col <- rev(heat.colors(length(breaks) - 1))
nlevels <- length(breaks) - 1
}
if (missing(breaks) & missing(col)){
breaks <- seq(min(Mat,na.rm = TRUE), max(Mat, na.rm = TRUE), length = nlevels + 1)
col <- rev(heat.colors(nlevels))
}
# if legend desired, it goes on the right and some space is needed
if (legend) {
par(mai = c(1,1,1.5,1.5))
}
# begin plot
image(x = minitics, y = minitics, t(Mat), useRaster = TRUE, asp = 1, axes = FALSE, xlab = "", ylab = "", col = col, breaks = breaks)
# add contours if desired
if (contours){
CL <- contourLines(x = minitics, y = minitics, t(Mat), levels = breaks)
A <- lapply(CL, function(xy){
lines(xy$x, xy$y, col = gray(.2), lwd = .5)
})
}
# add radial axes if desired
if (axes){
# internals for axis markup
RMat <- function(radians){
matrix(c(cos(radians), sin(radians), -sin(radians), cos(radians)), ncol = 2)
}
circle <- function(x, y, rad = 1, nvert = 500){
rads <- seq(0,2*pi,length.out = nvert)
xcoords <- cos(rads) * rad + x
ycoords <- sin(rads) * rad + y
cbind(xcoords, ycoords)
}
# draw circles
if (missing(circle.rads)){
circle.rads <- pretty(c(0,outer.radius))
}
for (i in circle.rads){
lines(circle(0, 0, i), col = "#66666650")
}
# put on radial spoke axes:
#axis.rads <- c(0, pi / 6, pi / 3, pi / 2, 2 * pi / 3, 5 * pi / 6)
#r.labs <- c(90, 60, 30, 0, 330, 300)
#l.labs <- c(270, 240, 210, 180, 150, 120)
#for (i in 1:length(axis.rads)){
#  endpoints <- zapsmall(c(RMat(axis.rads[i]) %*% matrix(c(1, 0, -1, 0) * outer.radius,ncol = 2)))
#  segments(endpoints[1], endpoints[2], endpoints[3], endpoints[4], col = "#66666650")
#  endpoints <- c(RMat(axis.rads[i]) %*% matrix(c(1.1, 0, -1.1, 0) * outer.radius, ncol = 2))
#  lab1 <- bquote(.(r.labs[i]) * degree)
#  lab2 <- bquote(.(l.labs[i]) * degree)
#  text(endpoints[1], endpoints[2], lab1, xpd = TRUE)
#  text(endpoints[3], endpoints[4], lab2, xpd = TRUE)
#}
#axis(2, pos = -1.2 * outer.radius, at = sort(union(circle.rads,-circle.rads)), labels = NA)
#text( -1.21 * outer.radius, sort(union(circle.rads, -circle.rads)),sort(union(circle.rads, -circle.rads)), xpd = TRUE, pos = 2)
}
# add legend if desired
# this could be sloppy if there are lots of breaks, and that's why it's optional.
# another option would be to use fields:::image.plot(), using only the legend.
# There's an example for how to do so in its documentation
if (legend){
ylevs <- seq(-outer.radius, outer.radius, length = nlevels + 1)
rect(1.2 * outer.radius, ylevs[1:(length(ylevs) - 1)], 1.3 * outer.radius, ylevs[2:length(ylevs)], col = col, border = NA, xpd = TRUE)
rect(1.2 * outer.radius, min(ylevs), 1.3 * outer.radius, max(ylevs), border = "#66666650", xpd = TRUE)
text(1.3 * outer.radius, ylevs,round(breaks, 1), pos = 4, xpd = TRUE)
}
}
set.seed(9)
x <- rnorm(20)
y <- rnorm(20)
z <- rnorm(20)
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1))
?image
filled.contout(x,y,z)
filled.contour(x,y,z)
filled.contour(sort(x),sort(y),z)
filled.contour(sort(x),sort(y),t(Mat))
size(Mat)
dim(Mat)
size(x)
dim(x)
length(x)
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1))
points(x,y)
?image
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1))
?image
contour(z)
contour(x,y,z)
m = matrix(seq(1:20),ncol=4)
m
m = matrix(seq(1:20),ncol=4,byrow=T)
m
mVec <- as.vector(m)
mVec
mVec <- as.vector(t(m))
mVec
m2 <- as.matrix(mVec, ncik-4, byrow=T)
m2
m2 <- as.matrix(mVec, ncol=4, byrow=T)
m2
m2 <- matrix(mVec, ncol=4, byrow=T)
m2
m-m2
a=c(1,2,3,4)
b=c(5,6,7,8)
c(a,b)
?c
t[[1]] = c(1,2,3,4)
t=list()
t[[1]] = c(1,2,3,4)
t[[2]] = c(5,6,7,8)
rbind(t)
c(t)
m
c(m,m2)
rbind(m,m2)
1.01^3 - 0.99^3
1.01^4
(2*1.01^4+2) - (2*0.99^4+2)
0.160016/0.02
log(1)
e^(log(1))
exp(log(1))
exp(0.248)
exp(6.618)
library(manipulate)
?manipulate
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
?dTable
library(rCharts)
?dTable
setwd("D:\\GitHub\\Coursera_DataScience\\Reproducible_Research\\RepData_PeerAssessment1")
ls
files()
?unzip
activity <- read.csv("activity.csv")
head(activity)
install.packages("knitr")
install.packages("knitr")
str(activity)
tail(activity)
library(plyr)
stepsPerDay <- ddply(data=activity,.(date), summarise, meanSteps <- mean(steps, na.rm=T))
?ddply
stepsPerDay <- ddply(data=activity,.(date), summarizee, meanSteps = mean(steps, na.rm=T))
stepsPerDay <- ddply(activity, .(date), summarizee, meanSteps = mean(steps, na.rm=T))
stepsPerDay <- ddply(activity, .(date), summarize, meanSteps = mean(steps, na.rm=T))
str(stepsPerDay)
?quantile
range(activity$steps)
range(activity$steps,na.rm=T)
?hist
stepsPerDay <- ddply(data=activity,.(date), summarize, steps = mean(steps, na.rm=T))
stepsPerDay <- ddply(activity, .(date), summarize, steps = mean(steps, na.rm=T))
names(stepsPerDay)
stepsPerDay <- ddply(activity,.(date), summarize, steps = sum(steps, na.rm=T))
quantile(stepsPerDay$steps, 0.5, na.rm=T)
mean(stepsPerDay$steps, na.rm=T)
hames(activity)
names(activity)
stepsPerInterval <- ddply(activity,.(interval), summarize, steps = mean(steps, na.rm=T))
stepsPerInterval <- ddply(activity,.(interval), summarize, steps = mean(steps, na.rm=T))
names(stepsPerInterval)
with(stepsPerInterval,plot(x=interval,y=steps,type="l"))
with(stepsPerInterval,plot(x=interval,y=steps,type="l",xlab="5 minute interval number"), ylab = "Mean steps across days", main="Average activity pattern over a day")
which(stepsPerInterval$steps==max(stepsPerInterval$steps))
stepsPerInterval <- ddply(activity,.(interval), summarize, steps = mean(steps, na.rm=T))
with(stepsPerInterval,plot(x=interval,y=steps,type="l",xlab="5 minute interval number"), ylab = "Mean steps across days", main="Average activity pattern over a day")
?plot
with(stepsPerInterval,plot(x=interval,y=steps,type="l",xlab="5 minute interval number", ylab = "Mean steps across days", main="Average activity pattern over a day"))
with(stepsPerInterval,plot(x=interval,y=steps,type="l",xlab="5 minute interval number", ylab = "Mean steps across days", main="Average activity pattern over a day"))
```{r, echo=True}
?impute
?na.action
sum(is.na(activity$steps))
lapply(activity, function(x) print(x$steps))
names(activity)
lapply(activity, function(x) x$steps)
lapply(activity, function(x) x[[1]])
lapply(activity, function(x) identity(x[[1]])
)
lapply(activity, function(x) x[[1]]$steps)
lapply(activity, function(x) identity(x[[1]]$steps))
lapply(activity, function(x) identity(x[[1]][[1]])
)
ddply(activity, function(x), identity(x$steps))
ddply(activity, function(x) identity(x$steps))
?ddply
ddply(activity, identity, steps)
?identity
ddply(activity, .fun=identity, steps)
names(activity)
ddply(activity, .fun=mean, steps)
ddply(activity, .summarize, identity(steps))
ddply(activity, summarize, identity(steps))
lapply(activity, function(x) identity(as.data.frame(x)))
lapply(activity, function(x) identity(as.data.frame(x)$steps))
lapply(activity, function(x) identity(as.data.frame(x)[[1]]))
lapply(activity, function(x) as.data.frame(x))
test <- lapply(activity, function(x) as.data.frame(x))
names(test)
test <- lapply(activity, function(x) unlist(as.data.frame(x))$steps)
test <- lapply(activity, function(x) unlist(as.data.frame(x))[[1]])
test
?lapply
test <- lapply(activity, function(x) unlist(as.data.frame(x[[1]])))
rm(test)
activity[[1]]
activity[1]
activity[,1]
activity[1,1]
activity[1,]
activity[1,]$steps
?list
?vector
test <- vector(0, nrow(activity))
?seros
?zeros
?zerro
?zero
?list
test <- list(0,nrow=nrow(activity))
test
test <- list(rep(0,nrow(activity))
)
test
row=1
activity$steps[[1]]
activity$steps[[100]]
activity$steps[[101]]
activity$steps[[1001]]
activity$steps[[10000]]
activity$steps[[1200]]
activity$steps[[12000]]
for (row in seq(1:nrow(activity))) {
#if current row has NA, then impute
if (is.na(activity[row,]$steps) {
stepsImpute[row] <- stepsPerInterval$steps[which(stepsPerInterval$interval==activity[row,]$interval)]
} else {
stepsImput[row] <- activity[row,]$steps
}
}
for (row in seq(1:nrow(activity))) {
#if current row has NA, then impute
if (is.na(activity[row,]$steps) {
stepsImpute[row] <- stepsPerInterval$steps[which(stepsPerInterval$interval==activity[row,]$interval)]
} else {
stepsImpute[row] <- activity[row,]$steps
}
}
for (row in seq(1:nrow(activity))) {
#if current row has NA, then impute
if (is.na(activity[row,]$steps)) {
stepsImpute[row] <- stepsPerInterval$steps[[which(stepsPerInterval$interval==activity[row,]$interval)]]
} else {
stepsImpute[row] <- activity[row,]$steps
}
}
stepsImpute <- list(rep(NA,nrow(activity)))
nrow(stepsImpute)
stepsImpute <- list(rep(0,nrow(activity)))
nrow(stepsImpute)
stepsImpute
stepsImpute[[1]]
stepsImpute[1]
?list
test <-vector("list",nrow(activity))
test
test[[1]] = 1
test[[2]] = 2
test[[1:2]]
test[1:@
test[1:2]
stepsImpute <- vector("list",nrow(activity))
#Loop through rows of activity to impute values
for (row in seq(1:nrow(activity))) {
#if current row has NA, then impute
if (is.na(activity[row,]$steps)) {
stepsImpute[[row]] <- stepsPerInterval$steps[[which(stepsPerInterval$interval==activity[row,]$interval)]]
} else {
stepsImpute[[row]] <- activity[row,]$steps
}
}
test(unlist(stepsImpute))
test<-(unlist(stepsImpute))
activity$stepsImputs <- unlist(stepsImpute)
activity$stepsImputs <- NULL
activity$stepsImputed <- unlist(stepsImpute)
table(mean(activity$steps,na.rm=T),mean(activity$stepsImputed))
?table
mean(activity$stepsImputed)
mean(activity$steps)
mean(activity$steps,na.rm=T)
stepsPerDayImputed <- ddply(activity,.(date), summarize, steps = sum(stepsImputed, na.rm=T))
quantile(stepsPerDayImputed$steps, 0.5, na.rm=T)
mean(stepsPerDayImputed$steps, na.rm=T)
hist(stepsPerDayImputed$steps, breaks=20, main="Histogram of imputed steps per day", xlab = "steps", ylab = "number of days")
step_mean.i <- mean(stepsPerDayImputed$steps, na.rm=T)
step_mean.i
comparison <- data.frame(means=c(mean(stepsPerDay$steps, na.rm=T),mean(stepsPerDayImputed$steps, na.rm=T)),median=(quantile(stepsPerDay$steps, 0.5, na.rm=T),quantile(stepsPerDayImputed$steps, 0.5, na.rm=T)),row.names=c("original","imputed"))
comparison <- data.frame(means=c(mean(stepsPerDay$steps, na.rm=T),mean(stepsPerDayImputed$steps, na.rm=T)),median=c(quantile(stepsPerDay$steps, 0.5, na.rm=T),quantile(stepsPerDayImputed$steps, 0.5, na.rm=T)),row.names=c("original","imputed")
)
comparison
table(comparison)
comparison <- data.frame(mean=c(mean(stepsPerDay$steps, na.rm=T),mean(stepsPerDayImputed$steps, na.rm=T)),median=c(quantile(stepsPerDay$steps, 0.5, na.rm=T),quantile(stepsPerDayImputed$steps, 0.5, na.rm=T)),row.names=c("original","imputed"))
comparison
?hist
test <- na.omit(activity)
hist(na.omit(stepsPerDay$steps), breaks=20, main="Histogram of steps per day", xlab = "steps", ylab = "number of days")
hist(stepsPerDayImputed$steps, breaks=20, main="Histogram of imputed steps per day", xlab = "steps", ylab = "number of days")
?na
?na.action
?weekdays
activity$weekday <- weekdays(activity$date)
str(activity)
?Date
?date
library(lubridate)
activity$date[[1]]
ymd(activity$date[[1]])
activity$weekday <- weekdays(ymd(activity$date))
str(activity)
"Monday" %in% c("Monday","Tuesday")
activity$day <- weekdays(ymd(activity$date))
activity$weekday <- ifelse(activity$day %in% c("Saturday","Sunday"),"Weekend","Weekday")
str(activity)
activity$weekday <- as.factor(ifelse(activity$day %in% c("Saturday","Sunday"),"Weekend","Weekday"))
str(activity)
stepsPerIntervalSplit <- ddply(activity,.(weekday,interval),steps = mean(steps))
?ddply
names(stepsPerIntervalSplit)
stepsPerIntervalSplit <- ddply(activity,.(weekday,interval), summarize, steps = mean(steps))
names(stepsPerIntervalSplit)
stepsPerIntervalSplit <- ddply(activity, .(weekday,interval), summarize, steps = mean(steps))
library(ggplot)
library(ggplot2)
?ggplot
?facet_wrap
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line() + facet_wrap(weekday)
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line() + facet_wrap(~weekday)
p
ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line() + facet_wrap(~weekday)
ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line()
str(stepsPerIntervalSplit)
names(activity)
stepsPerIntervalSplit <- ddply(activity, .(weekday,interval), summarize, steps = mean(stepsImputed))
names(activity)
str(stepsPerIntervalSplit)
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line() + facet_wrap(weekday)
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line() + facet_wrap(~weekday)
p
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line() + facet_wrap(weekday~)
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line() + facet_wrap(~weekday,ncol=1)
p
p+ylab("Mean number of steps") + xlab("5 minute interval number")
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line() + facet_wrap(~weekday,ncol=1) + ylab("Mean number of steps") + xlab("5 minute interval number")
p
?geom_line
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line(aes(size=2)) + facet_wrap(~weekday,ncol=1) + ylab("Mean number of steps") + xlab("5 minute interval number")
p
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line(aes(size=1)) + facet_wrap(~weekday,ncol=1) + ylab("Mean number of steps") + xlab("5 minute interval number")
p
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line() + facet_wrap(~weekday,ncol=1) + ylab("Mean number of steps") + xlab("5 minute interval number")
p
p <- ggplot(stepsPerIntervalSplit,aes(interval,steps)) + geom_line(size=1) + facet_wrap(~weekday,ncol=1) + ylab("Mean number of steps") + xlab("5 minute interval number")
p
