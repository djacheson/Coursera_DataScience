#try to speed up!
PolarImageInterpolate <- function(x, y, z, outer.radius = 1,
breaks, col, nlevels = 20, contours = TRUE, legend = TRUE,
axes = TRUE, circle.rads = pretty(c(0,outer.radius))){
minitics <- seq(-outer.radius, outer.radius, length.out = 1000)
# interpolate the data
Interp <- akima:::interp(x = x, y = y, z = z,
extrap = TRUE,
xo = minitics,
yo = minitics,
linear = FALSE)
Mat <- Interp[[3]]
# mark cells outside circle as NA
markNA <- matrix(minitics, ncol = 1000, nrow = 1000)
Mat[!sqrt(markNA ^ 2 + t(markNA) ^ 2) < outer.radius] <- NA
# sort out colors and breaks:
if (!missing(breaks) & !missing(col)){
if (length(breaks) - length(col) != 1){
stop("breaks must be 1 element longer than cols")
}
}
if (missing(breaks) & !missing(col)){
breaks <- seq(min(Mat,na.rm = TRUE), max(Mat, na.rm = TRUE), length = length(col) + 1)
nlevels <- length(breaks) - 1
}
if (missing(col) & !missing(breaks)){
col <- rev(heat.colors(length(breaks) - 1))
nlevels <- length(breaks) - 1
}
if (missing(breaks) & missing(col)){
breaks <- seq(min(Mat,na.rm = TRUE), max(Mat, na.rm = TRUE), length = nlevels + 1)
col <- rev(heat.colors(nlevels))
}
# if legend desired, it goes on the right and some space is needed
if (legend) {
par(mai = c(1,1,1.5,1.5))
}
# begin plot
image(x = minitics, y = minitics, t(Mat), useRaster = TRUE, asp = 1, axes = FALSE, xlab = "", ylab = "", col = col, breaks = breaks)
# add contours if desired
if (contours){
CL <- contourLines(x = minitics, y = minitics, t(Mat), levels = breaks)
A <- lapply(CL, function(xy){
lines(xy$x, xy$y, col = gray(.2), lwd = .5)
})
}
# add radial axes if desired
if (axes){
# internals for axis markup
RMat <- function(radians){
matrix(c(cos(radians), sin(radians), -sin(radians), cos(radians)), ncol = 2)
}
circle <- function(x, y, rad = 1, nvert = 500){
rads <- seq(0,2*pi,length.out = nvert)
xcoords <- cos(rads) * rad + x
ycoords <- sin(rads) * rad + y
cbind(xcoords, ycoords)
}
# draw circles
if (missing(circle.rads)){
circle.rads <- pretty(c(0,outer.radius))
}
for (i in circle.rads){
lines(circle(0, 0, i), col = "#66666650")
}
# put on radial spoke axes:
#axis.rads <- c(0, pi / 6, pi / 3, pi / 2, 2 * pi / 3, 5 * pi / 6)
#r.labs <- c(90, 60, 30, 0, 330, 300)
#l.labs <- c(270, 240, 210, 180, 150, 120)
#for (i in 1:length(axis.rads)){
#  endpoints <- zapsmall(c(RMat(axis.rads[i]) %*% matrix(c(1, 0, -1, 0) * outer.radius,ncol = 2)))
#  segments(endpoints[1], endpoints[2], endpoints[3], endpoints[4], col = "#66666650")
#  endpoints <- c(RMat(axis.rads[i]) %*% matrix(c(1.1, 0, -1.1, 0) * outer.radius, ncol = 2))
#  lab1 <- bquote(.(r.labs[i]) * degree)
#  lab2 <- bquote(.(l.labs[i]) * degree)
#  text(endpoints[1], endpoints[2], lab1, xpd = TRUE)
#  text(endpoints[3], endpoints[4], lab2, xpd = TRUE)
#}
#axis(2, pos = -1.2 * outer.radius, at = sort(union(circle.rads,-circle.rads)), labels = NA)
#text( -1.21 * outer.radius, sort(union(circle.rads, -circle.rads)),sort(union(circle.rads, -circle.rads)), xpd = TRUE, pos = 2)
}
# add legend if desired
# this could be sloppy if there are lots of breaks, and that's why it's optional.
# another option would be to use fields:::image.plot(), using only the legend.
# There's an example for how to do so in its documentation
if (legend){
ylevs <- seq(-outer.radius, outer.radius, length = nlevels + 1)
rect(1.2 * outer.radius, ylevs[1:(length(ylevs) - 1)], 1.3 * outer.radius, ylevs[2:length(ylevs)], col = col, border = NA, xpd = TRUE)
rect(1.2 * outer.radius, min(ylevs), 1.3 * outer.radius, max(ylevs), border = "#66666650", xpd = TRUE)
text(1.3 * outer.radius, ylevs,round(breaks, 1), pos = 4, xpd = TRUE)
}
}
set.seed(9)
x <- rnorm(20)
y <- rnorm(20)
z <- rnorm(20)
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1))
?image
filled.contout(x,y,z)
filled.contour(x,y,z)
filled.contour(sort(x),sort(y),z)
filled.contour(sort(x),sort(y),t(Mat))
size(Mat)
dim(Mat)
size(x)
dim(x)
length(x)
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1))
points(x,y)
?image
PolarImageInterpolate(x,y,z, breaks = seq(-2,8,by = 1))
?image
contour(z)
contour(x,y,z)
m = matrix(seq(1:20),ncol=4)
m
m = matrix(seq(1:20),ncol=4,byrow=T)
m
mVec <- as.vector(m)
mVec
mVec <- as.vector(t(m))
mVec
m2 <- as.matrix(mVec, ncik-4, byrow=T)
m2
m2 <- as.matrix(mVec, ncol=4, byrow=T)
m2
m2 <- matrix(mVec, ncol=4, byrow=T)
m2
m-m2
a=c(1,2,3,4)
b=c(5,6,7,8)
c(a,b)
?c
t[[1]] = c(1,2,3,4)
t=list()
t[[1]] = c(1,2,3,4)
t[[2]] = c(5,6,7,8)
rbind(t)
c(t)
m
c(m,m2)
rbind(m,m2)
1.01^3 - 0.99^3
1.01^4
(2*1.01^4+2) - (2*0.99^4+2)
0.160016/0.02
setwd("D:\\Classes\\Coursera Data Science\\R Programming\\Assignment1")
pollutantmean <- function(directory, pollutant, id=1:332) {
#for loop to make dataframe with all csv files
for (currId in 1:length(id)) {
fileName <- paste0(id[[currID]],".csv")
currData <- read.csv(fileName)
if (currId == 1) {
allData <- currData
} else {
allData <- rbind(allData,currData)
}
}
return(mean(allData[pollutant],na.rm=T))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id=1:332) {
#for loop to make dataframe with all csv files
for (currID in 1:length(id)) {
fileName <- paste0(id[[currID]],".csv")
currData <- read.csv(fileName)
if (currId == 1) {
allData <- currData
} else {
allData <- rbind(allData,currData)
}
}
return(mean(allData[pollutant],na.rm=T))
}
pollutantmean("specdata", "sulfate", 1:10)
getwd()
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
id=1:10
directory = "specdata"
currID = 1
filePath <- paste0("./",directory,"/00",id[[currID]],".csv")
currData <- read.csv(filePath)
names(currData)
head(currData)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/pollutantmean.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
?file
?list
?ls
directory
allFiles <- list.files(path=paste0("./",directory),pattern="*.csv")
?data.frame
df_complete <- (c(id="",nobs=""))
?list
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
id <- lapply(allFiles,function(x) identity(x))
id[1]
id[[1]]
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
nobs <- lapply(allFiles, function(x) complete.cases(read.csv(x)))
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
nobs <- lapply(allFiles, function(x) complete.cases(read.csv(allFiles[[x]])))
nobs <- lapply(allFiles, function(x) complete.cases(read.csv(x)))
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
nobs <- lapply(allFiles, function(x) complete.cases(read.csv(paste0("./",directory,"/",x))))
nobs[[1]]
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
nobs <- lapply(allFiles, function(x) sum(complete.cases(read.csv(paste0("./",directory,"/",x)))))
nobs[[1]]
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
id = 1:10
allFiles <- list.files(path=paste0("./",directory),pattern="*.csv")
id <- lapply(id,function(x) allFiles[[id]])
id <- lapply(id,function(x) allFiles[[x]])
id
nobs <- lapply(id, function(x) sum(complete.cases(read.csv(paste0("./",directory,"/",allFiles[[x]])))))
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
id
id=1:10
ids <- lapply(id,function(x) allFiles[[x]])
nobs <- lapply(id, function(x) sum(complete.cases(read.csv(paste0("./",directory,"/",allFiles[[x]])))))
nobs
df_complete <- (c(id=id,nobs=nobs))
df_complete
require(plyr)
ids <- llpply(id,function(x) allFiles[[x]])
ids <- llply(id,function(x) allFiles[[x]])
ids
unlist(ids)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
nobs <- lapply(id, function(x) sum(complete.cases(read.csv(paste0("./",directory,"/",allFiles[[x]])))))
ids <- lapply(id,function(x) allFiles[[x]])
df_complete <- data.frame(c(id=unlist(id),nobs=unlist(nobs)))
df_complete
ids
df_complete <- data.frame(id=unlist(id),nobs=unlist(nobs))
df_complete
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
complete("specdata", 30:25)
complete("specdata", 3)
allFiles <- list.files(path=paste0("./",directory),pattern="*.csv")
nrow(allFiles)
nrows(allFiles)
lentgh(allFiles)
length(allFiles)
id <- 1:length(allFiles)
nobs <- unlist(lapply(id, function(x) sum(complete.cases(read.csv(paste0("./",directory,"/",allFiles[[x]]))))))
thresh=50
threshFiles <- allFiles[nobs>threshold]
threshold=50
threshFiles <- allFiles[nobs>threshold]
threshold=50000
threshFiles <- allFiles[nobs>threshold]
length(threshFiles)
?corr
?cor
names(allData)
thresh=150
threshFiles <- allFiles[nobs>threshold]
if (length(threshFiles ==0) {
return(0)
} else { #we have some data
for (i in 1:length(threshFiles)) {
currData <- read.csv(paste0("./",directory,"/",allFiles[[i]]))
if (i==1) {
allData <- currData
} else {
allData <- rbind(allData,currData)
}
}
}
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
threshFiles <- allFiles[nobs>threshold]
if (length(threshFiles ==0)) {
return(0)
} else { #we have some data
for (i in 1:length(threshFiles)) {
currData <- read.csv(paste0("./",directory,"/",threshFiles[[i]]))
if (i==1) {
allData <- currData
} else {
allData <- rbind(allData,currData)
}
}
}
threshold=50
threshFiles <- allFiles[nobs>threshold]
if (length(threshFiles ==0)) {
return(0)
} else { #we have some data
for (i in 1:length(threshFiles)) {
currData <- read.csv(paste0("./",directory,"/",threshFiles[[i]]))
if (i==1) {
allData <- currData
} else {
allData <- rbind(allData,currData)
}
}
}
for (i in 1:length(threshFiles)) {
currData <- read.csv(paste0("./",directory,"/",threshFiles[[i]]))
if (i==1) {
allData <- currData
} else {
allData <- rbind(allData,currData)
}
}
length(thresFiles)
length(threshFiles)
names(allData)
correl <- cor(allData$sulfate,allData$nitrate,na.rm=T)
correl
allData <- allData[complete.cases(allData)]
allData <- allData[complete.cases(allData),]
correl <- cor(allData$sulfate,allData$nitrate)
correl
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
if (length(threshFiles ==0)) {
return(0)
} else { #we have some data
for (i in 1:length(threshFiles)) {
currData <- read.csv(paste0("./",directory,"/",threshFiles[[i]]))
if (i==1) {
allData <- currData
} else {
allData <- rbind(allData,currData)
}
}
}
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
if (length(threshFiles == 0)) {
return(as.numeric(0))
} else { #we have some data
for (i in 1:length(threshFiles)) {
currData <- read.csv(paste0("./",directory,"/",threshFiles[[i]]))
if (i==1) {
allData <- currData
} else {
allData <- rbind(allData,currData)
}
}
}
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
df_complete <- complete(directory)
names(df_complete)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
df_tresh <- df_complete[df_complete$nobs > thresh,]
thresh=5000
df_tresh <- df_complete[df_complete$nobs > thresh,]
df_thresh <- df_complete[df_complete$nobs > thresh,]
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
nrow(df_thresh == 0)
dim(df_thresh == 0)
nrow(df_thresh) == 0
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
thresh=150
df_thresh <- df_complete[df_complete$nobs > thresh,]
correls <- list()
for (i in 1:length(threshFiles)) {
currData <- read.csv(paste0("./",directory,"/",df_thresh$id[[i]]))
correls[[i]] <- cor(currData$sulfate,currData$nitrate)
return(correls)
}
df_complete
df_thresh$id[[1]]
typeof(df_thresh$id[[1]])
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
cr <- corr("specdata", 400)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
cr <- corr("specdata", 400)
cr
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
cr <- corr("specdata", 400)
cr
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
head(cr)
head(unlist(cr))
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
cr <- corr("specdata", 400)
head(cr)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
cr <- corr("specdata", 150)
getwd()
source(complete.R)
list.files()
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
source("submitscript1.R")
install.packages("digest")
submit
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
cr <- corr("specdata", 5000)
summary(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
c("")
cr <- corr("specdata", 5000)
summary(cr)
cr
rm(cr)
cr <- corr("specdata", 5000)
cr
character(0)
length(character(0))
length(numeric(0))
summary(numeric(0))
character(0)
cr <- corr("specdata", 5000)
source('D:/Classes/Coursera Data Science/R Programming/Assignment1/All_Functions.R')
cr
summary(cr)
summary(numeric(0))
summary(character(0))
t <- numeric(0)
t
return(numeric(0))
corr <- function(directory, threshold = 0) {
source("complete.R")
#This below worked fine, but decided to use the complete code above
#allFiles <- list.files(path=paste0("./",directory),pattern="*.csv")
#id <- 1:length(allFiles)
#number of observations in all files
#nobs <- unlist(lapply(id, function(x) sum(complete.cases(read.csv(paste0("./",directory,"/",allFiles[[x]]))))))
#list of files passing threshold
#threshFiles <- allFiles[nobs>threshold]
df_complete <- complete(directory)
df_thresh <- df_complete[df_complete$nobs >= threshold,]
if (nrow(df_thresh) == 0) {
return(numeric(0))
} else { #we have some data
#make a list to hold correlations
correls <- list()
for (i in 1:nrow(df_thresh)) {
#naming has to be corrected to add some 0's in front of ID #
if (df_thresh$id[[i]] < 10) {
currCSV <- paste0("00",df_thresh$id[[i]],".csv")
} else if (df_thresh$id[[i]] < 100) {
currCSV <- paste0("0",df_thresh$id[[i]],".csv")
} else {
currCSV <- paste0(df_thresh$id[[i]],".csv")
}
#open data, calculate correlation and add it to correls list
currData <- read.csv(paste0("./",directory,"/",currCSV))
correls[[i]] <- cor(currData$sulfate,currData$nitrate,use = "pairwise.complete.obs")
}
return(unlist(correls))
}
}
cr <- corr("specdata", 5000)
summary(cr)
submit
submit()
rm(list=ls())
